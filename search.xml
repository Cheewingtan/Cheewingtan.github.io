<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中国农历的算法</title>
      <link href="/2020/11/08/Lunar/"/>
      <url>/2020/11/08/Lunar/</url>
      
        <content type="html"><![CDATA[<h2 id="农历和阴历的差别"><a class="markdownIt-Anchor" href="#农历和阴历的差别">#</a> 农历和阴历的差别</h2><ul><li>阴历 = 太阴历的简称。是根据月球围绕地球运转的周期（约等于 29.5 天）制定的历法。大月 30 天，小月 29 天，12 个月为 1 年，1 年 354 天或 355 天。伊斯兰教历就是阴历的一种。</li><li>农历 = 中国传统历法。因其与农业生产有关，故称。相传始行于夏代，所以也叫夏历。属阴阳历，人们习惯上把它叫阴历。平年 12 个月，闰年 13 个月。大月 30 天，小月 29 天，平年全年 354 天或 355 天，闰年全年 383 天或 384 天。每年分 24 个节气，便于农事安排。以天干地支搭配纪年，60 年周而复始</li></ul><h3 id="年的计算方式"><a class="markdownIt-Anchor" href="#年的计算方式">#</a> 年的计算方式</h3><p>按照公历一年会有 365.2422 如果我们计算 365 天 那每年就会多 0.2422 天，因此当 0.2499*4 年 = 0.9996, 就会接近多出一天，而这一天就是四年一度的（闰年）二月 29，但是它是 0.9996 所以每一百年会多出一天，而该年就不计算成闰年，而 400 年后则是计算润年当中</p><h3 id="月的计算方式"><a class="markdownIt-Anchor" href="#月的计算方式">#</a> 月的计算方式</h3><p>初一 = 塑 ，十五 = 望 加起来则是塑望月，一共 29.53 天 * 12 月 = 354.36 days，那么按照 (一年) 365.2422-354.36 = 会多出 10.8822 天 ，再 * 3 的话就接近一个月，所以三年可以补一个月 但是 10.8822 乘 3 也不等于 29.53 天，所以古人计算最好的补月方式是 19 年补 7 个月，而这七个月就是润月。</p><ul><li>因为 19*365.2422（年的转动天数）=6939.6018 天</li><li>而 29.53 *  12 *  19 +  (7 个闰月 * 29.53) =6939.55</li><li>误差相当的小，所以每几百年就会调整一次这个误差<br>因为 29.53 为一个月，因此古人划分一些 29 天为小月，30 天为大月（不固定，根据天文观测）</li></ul><h3 id="24节气"><a class="markdownIt-Anchor" href="#24节气">#</a> 24 节气</h3><p>前面提到的七个闰月是通过 24 节气来补，一年地球转动 360 度 / 24 = 每个节气等于 15 度，<br>分别名字为 =<br> 立春、雨水、惊蛰、春分、清明、谷雨、立夏、小满、芒种、夏至、小暑、大暑、立秋、处暑、白露、秋分、寒露、霜降、立冬、小雪、大雪、冬至、小寒、大寒<br> 24 节气分成节气和中气，隔着来，立春节气，那么雨水就是中气，下一个就是节气。</p><p>计算润月的方式，就是每月绑定一个中气，当中气的日期是在该月里的初始日期和终止日期之间，那么就不需要闰月，而当中气的日期不在该月里的初始日期和终止日期之间，该月就是润月，如果是在四月就叫润四月，那么原本中气就会在下个月出现。</p><h3 id="节气计算公式"><a class="markdownIt-Anchor" href="#节气计算公式">#</a> 节气计算公式</h3><p>节气和中气的准确日期是按照以下公式来实现，准确度只在 1900-2100 年之间，资料参考 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><pre class=" language-language-python"><code class="language-language-python">import mathday_in_month =[31,28,31,30,31,30,31,31,30,31,30,31]def F(y,x):    return  365.242 * (y-1900) + 6.2 + 15.22 * x - 1.9 * math.sin(0.262 * x)#判断闰年def is_leap_year(year):    if year % 400 == 0:    #看看能不能被400整除    return True    elif year % 100 == 0:    return False    elif year % 4 == 0:    return True    else:        return Falsedef gets_days_in_month(year,month):    if is_leap_year(year) and month == 1:        return days_in_month[month] +1     else:        return days_in_month[month]def days_to_geogorian_date(n):          #:parameter n:num days from 1900-01-00          y = 1900      m = 0     while n > get_days_in_month[y,m]:        n =n - get_days_in_month[y,m]        m = (m + 1)%12        if m == 0:            y = y + 1    year = y      month =m + 1    day = n     return year, month , day for i in range(0,4):    days = init F(1900,i)    y , m , d = days_to_geogorian_date(days)    print("{}年{}月{}日",format(y,m,d))#Output = 1月6日 （意思是1900年一月6号就是第一个节气）/1月20日/2月4日/2月19日</code></pre><h3 id="朔日的计算"><a class="markdownIt-Anchor" href="#朔日的计算">#</a> 朔日的计算</h3><p>那么每月的初始日期和终止日期怎么算呢，就要用到以下公式了</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93ZW5rdS5iYWlkdS5jb20vdmlldy8zYTI5Mjc4NDcxZmU5MTBlZjEyZGY4NGQuaHRtbA==">https://wenku.baidu.com/view/3a29278471fe910ef12df84d.html</span> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Roam Research</title>
      <link href="/2020/07/13/roam/"/>
      <url>/2020/07/13/roam/</url>
      
        <content type="html"><![CDATA[<h2 id="充满神秘的记笔记应用"><a class="markdownIt-Anchor" href="#充满神秘的记笔记应用">#</a> 充满神秘的记笔记应用</h2><p>前几天朋友向我推荐了一款叫 RoamResearch 的工具，据说在 KM（知识管理）<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>圈子里挺火爆的，据他说法这 RoamResearch 的独特的功能以及背后的理念将引领新一代知识管理的变革，像我这种只会用 evernote 的 web clipper 的人来说或许是个进入知识管理圈子的机会。</p><h3 id="具体特点在哪里"><a class="markdownIt-Anchor" href="#具体特点在哪里">#</a> 具体特点在哪里</h3><ul><li>双向链接<ul><li>提供丰富的上下文链接 即做笔记 A 的时候能链接到笔记 B，相反笔记就 B 也能反向链接笔记 A</li></ul></li><li>颗粒<ul><li>继承第一个特性 “双向链接” 类似网状笔记 每一个节点都是独立的主题 双向链接将自动链接</li></ul></li><li>野望<ul><li>通过协作方式贯通每个人的 “第二大脑” 超级知识大脑</li></ul></li></ul><p>RoamResearch 真正想做的貌似 “直接获得别人的思维之网，而不是最后编译出来的线性文字” 即熟悉 Roam Research 方式后可以 “一键导入” 别人的思维源代码而不是经过编译后所得的结果。</p><p>什么是编译后的结果，就像现代我们学习知识途径之一是通过阅读书来获取作者的思维成果，但这其实并非是一个高效的做法，<br>正如 史蒂芬平克《风格感觉》中的话</p><blockquote><p>写作之难，在于把网状的思考，用树状的语法结构，转换成线性字符串。<br>“The Web, the Tree, and the String”</p></blockquote><p>作者是很难将脑海中闪现而过的灵光通过写书的方式来完整的传递给读者因此 RoamResearch 想做的事还挺有趣的</p><p>二话不说，开始操作</p><ol><li>创建数据库<ol><li>完成付费后 第一步骤创建你自己的数据库什么名都可以一般人用自己名即可 之后来到 graph 一样打上自己名即可</li></ol></li><li>进入页面可以看到三大块<ol><li>Daily Note<ol><li>记录每一天所学习到的</li></ol></li><li>Graph Overview<br>1.</li></ol></li><li>其他块<ol><li>帮助小工具：遇事不决小工具</li></ol></li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>知识管理（英語：knowledge management，缩写为 KM）包括一系列企业内部定义、创建、传播、采用新的知识和经验的战略和实践。 这些知识和经验包括认知，可以是个人知识，以及组织中商业流程或实践。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>世间的一些规则</title>
      <link href="/2020/07/02/law/"/>
      <url>/2020/07/02/law/</url>
      
        <content type="html"><![CDATA[<h1 id="一些该反复思考的道理"><a class="markdownIt-Anchor" href="#一些该反复思考的道理">#</a> 一些该反复思考的道理</h1><h3 id="1世界的运转与自己无关因此自己以为的障碍苦难大部分都是自己给自己设下的"><a class="markdownIt-Anchor" href="#1世界的运转与自己无关因此自己以为的障碍苦难大部分都是自己给自己设下的">#</a> 1. 世界的运转与自己无关，因此自己以为的障碍，苦难大部分都是自己给自己设下的</h3><h2 id="提醒"><a class="markdownIt-Anchor" href="#提醒">#</a> 提醒</h2><h3 id="-实现财务方法绝对不少除了做自己本行每天花点时间探索其他方面"><a class="markdownIt-Anchor" href="#-实现财务方法绝对不少除了做自己本行每天花点时间探索其他方面">#</a> - 实现财务方法绝对不少，除了做自己本行，每天花点时间探索其他方面</h3><h2 id="关于金钱"><a class="markdownIt-Anchor" href="#关于金钱">#</a> 关于金钱</h2><h3 id="一般来说越少的钱实现振幅越容易越多的钱实现振幅就越难但不是没有2017年的比特币财富振幅就能无论少钱或多钱都能振幅"><a class="markdownIt-Anchor" href="#一般来说越少的钱实现振幅越容易越多的钱实现振幅就越难但不是没有2017年的比特币财富振幅就能无论少钱或多钱都能振幅">#</a> 一般来说越少的钱实现振幅越容易，越多的钱实现振幅就越难，但不是没有，2017 年的比特币财富振幅就能无论少钱或多钱都能振幅</h3><h3 id="但如果普通案例的话小钱几千到几万振幅手段"><a class="markdownIt-Anchor" href="#但如果普通案例的话小钱几千到几万振幅手段">#</a> 但如果普通案例的话，小钱几千到几万，振幅手段：</h3><pre><code>- 做生意赚差价=30%-100%- 做会员</code></pre><h2 id="专注力"><a class="markdownIt-Anchor" href="#专注力">#</a> 专注力</h2><h3 id="游戏赌黄毒手机小说杀时间app-都是利用碎片化上瘾来让我们获得快感长期什么也得不了这样的话我为何不花一样的时间去做短期也有快感长期也很益的事"><a class="markdownIt-Anchor" href="#游戏赌黄毒手机小说杀时间app-都是利用碎片化上瘾来让我们获得快感长期什么也得不了这样的话我为何不花一样的时间去做短期也有快感长期也很益的事">#</a> 游戏，赌，黄，毒，手机，小说，杀时间 app 都是利用碎片化 + 上瘾来让我们获得快感，长期什么也得不了，这样的话我为何不花一样的时间去做短期也有快感，长期也很益的事。</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Gymlife</title>
      <link href="/2020/07/02/gymlife/"/>
      <url>/2020/07/02/gymlife/</url>
      
        <content type="html"><![CDATA[<h1 id="健身基础概要"><a class="markdownIt-Anchor" href="#健身基础概要">#</a> 健身基础概要</h1><h2 id="健身计划"><a class="markdownIt-Anchor" href="#健身计划">#</a> 健身计划</h2><p>增肌期训练（重训），减脂期训练（有氧）</p><h2 id="一周计划-四天练全身"><a class="markdownIt-Anchor" href="#一周计划-四天练全身">#</a> 一周计划 四天练全身</h2><p>参考盖伊锻炼计划<br><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj12aHdOeEh2eHhXNCZhbXA7dD0xMDFz"> Youtube 链接</span><br>其他参考对象<br><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ0ZCUk1TUllqWW5PRURSUngxUG5LWmcvdmlkZW9z"> IFBB 吴龙</span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ25XSWRNcEhmQ0xxNDRHdjdTOS1fbmc=">健助师_小珂</span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ0ZkLTlqQWZidVVqd0RaamlzT3d2MXc="> shuaisoserious</span><br> 周一，三，五，日 锻炼<br>周二，四，六 休息日 + 有氧运动（跑步，脚踏车，打羽毛球）</p><h2 id="星期一-胸二头"><a class="markdownIt-Anchor" href="#星期一-胸二头">#</a> 星期一  胸 / 二头</h2><h3 id="杠铃卧推"><a class="markdownIt-Anchor" href="#杠铃卧推">#</a> 杠铃卧推</h3><p>次数：10/10/8/6/6<br> 锻炼部位：主要下胸<br>描述：平卧</p><h3 id="哑铃上胸"><a class="markdownIt-Anchor" href="#哑铃上胸">#</a> 哑铃上胸</h3><p>次数：10/10/10/10<br> 锻炼部位：上胸<br>描述：手握哑铃内侧，加深胸部肌肉感受度</p><h3 id="哑铃夹胸"><a class="markdownIt-Anchor" href="#哑铃夹胸">#</a> 哑铃夹胸</h3><p>次数：12/12/12/12<br> 锻炼部位：内侧上胸<br>描述：多感受上胸发力</p><h3 id="二头弯举"><a class="markdownIt-Anchor" href="#二头弯举">#</a> 二头弯举</h3><p>次数：10/10/8/8<br> 锻炼部位：二头肌</p><h3 id="上斜弯举"><a class="markdownIt-Anchor" href="#上斜弯举">#</a> 上斜弯举</h3><p>次数：10/10/8/8<br> 锻炼部位：二头肌<br>描述：坐在 75 度长椅，手翻转拿起哑铃</p><h3 id="w杠反握"><a class="markdownIt-Anchor" href="#w杠反握">#</a> W 杠反握</h3><p>次数：30/30<br> 锻炼部位：二头肌<br>描述：手掌朝下夹着杠铃拿起</p><h2 id="星期三-练腿臀-买了护腰带再练"><a class="markdownIt-Anchor" href="#星期三-练腿臀-买了护腰带再练">#</a> 星期三 练腿 + 臀 （* 买了护腰带再练）</h2><h3 id="杠铃蹲举"><a class="markdownIt-Anchor" href="#杠铃蹲举">#</a> 杠铃蹲举</h3><p>次数：5/5/5/4/4</p><h3 id="杠铃硬举"><a class="markdownIt-Anchor" href="#杠铃硬举">#</a> 杠铃硬举</h3><p>次数：6/6/6/6/6</p><h3 id="负重提重没道具下次"><a class="markdownIt-Anchor" href="#负重提重没道具下次">#</a> 负重提重（没道具，下次）</h3><p>次数：15/15/15/12/12</p><h2 id="星期五-练肩三头腹肌有氧"><a class="markdownIt-Anchor" href="#星期五-练肩三头腹肌有氧">#</a> 星期五 练肩 / 三头 + 腹肌 / 有氧</h2><h3 id="杠铃肩推"><a class="markdownIt-Anchor" href="#杠铃肩推">#</a> 杠铃肩推</h3><p>次数：6/6/6/5/5</p><h3 id="哑铃飞鸟"><a class="markdownIt-Anchor" href="#哑铃飞鸟">#</a> 哑铃飞鸟</h3><p>次数：12/12/12/12/12</p><h3 id="仰卧三头"><a class="markdownIt-Anchor" href="#仰卧三头">#</a> 仰卧三头</h3><p>次数：10/10/9/8</p><h3 id="缆绳下拉"><a class="markdownIt-Anchor" href="#缆绳下拉">#</a> 缆绳下拉</h3><p>次数：8/8/8/8</p><h3 id="杠铃耸肩"><a class="markdownIt-Anchor" href="#杠铃耸肩">#</a> 杠铃耸肩</h3><p>次数：8/8/8/8</p><h3 id="仰卧卷腹"><a class="markdownIt-Anchor" href="#仰卧卷腹">#</a> 仰卧卷腹</h3><p>次数：8/8/8/8</p><h3 id="间歇有氧"><a class="markdownIt-Anchor" href="#间歇有氧">#</a> 间歇有氧</h3><p>描述：彭于晏 type 绳 hahah<br> 次数：20min/1</p><h2 id="星期日-背腹肌后三角"><a class="markdownIt-Anchor" href="#星期日-背腹肌后三角">#</a> 星期日 背 / 腹肌 / 后三角</h2><h3 id="引体向上"><a class="markdownIt-Anchor" href="#引体向上">#</a> 引体向上</h3><p>次数：8/8/8/8/8<br>8/8/8/8/8</p><h3 id="反手引体"><a class="markdownIt-Anchor" href="#反手引体">#</a> 反手引体</h3><p>次数：8/8/8/8/8<br> 锻炼部位：后三角</p><h3 id="缆绳划船"><a class="markdownIt-Anchor" href="#缆绳划船">#</a> 缆绳划船</h3><p>次数：12/12/12/12/12</p><h3 id="反向飞鸟"><a class="markdownIt-Anchor" href="#反向飞鸟">#</a> 反向飞鸟</h3><p>次数：10/10/10/10/10/10</p><h3 id="ty字飞鸟"><a class="markdownIt-Anchor" href="#ty字飞鸟">#</a> TY 字飞鸟</h3><p>次数：12/12/12/12</p><h3 id="下腹抬腿"><a class="markdownIt-Anchor" href="#下腹抬腿">#</a> 下腹抬腿</h3><p>次数：10/9/8</p><h3 id="侧腹抬腿"><a class="markdownIt-Anchor" href="#侧腹抬腿">#</a> 侧腹抬腿</h3><p>次数：14/12/10</p><h1 id="锻炼身体部位"><a class="markdownIt-Anchor" href="#锻炼身体部位">#</a> 锻炼身体部位</h1><h2 id="饮食计划"><a class="markdownIt-Anchor" href="#饮食计划">#</a> 饮食计划</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gym </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2020/06/15/git/"/>
      <url>/2020/06/15/git/</url>
      
        <content type="html"><![CDATA[<h1 id="git全集"><a class="markdownIt-Anchor" href="#git全集">#</a> Git 全集</h1><p><img data-src="https://user-gold-cdn.xitu.io/2020/6/15/172b581c8e8c9dff?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="常用命令速查表"></p><p><img data-src="https://user-gold-cdn.xitu.io/2020/6/15/172b390eab77fcbd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="Git流程图"></p><ul><li>Workspace: 工作区</li><li>Index/Stage: 暂存区</li><li>Repository: 本地仓库</li><li>Remote: 远程仓库</li></ul><h2 id="配置git"><a class="markdownIt-Anchor" href="#配置git">#</a> 配置 Git</h2><pre class=" language-language-git"><code class="language-language-git"># 配置全局用户$ git config --global user.name "用户名" $ git config --global user.email "git账号"# 配置别名$ git config --global alias.co checkout$ git config --global alias.ss status$ git config --global alias.cm commit$ git config --global alias.br branch$ git config --global alias.rg reflog# 这里只是美化 log 的输出，实际使用时可以在 git lg 后面加命令参数，如： git lg -10 显示最近10条提交$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"# 删除全局配置$ git config --global --unset alias.xxx$ git config --global --unset user.xxx</code></pre><h2 id="查看git信息"><a class="markdownIt-Anchor" href="#查看git信息">#</a> 查看 Git 信息</h2><pre class=" language-language-git"><code class="language-language-git"># 查看系统配置$ git config --list# 查看用户配置$ cat ~/.gitconfig # 查看当前项目的 git 配置$ cat .git/config# 查看暂存区的文件$ git ls-files# 查看本地 git 命令历史$ git reflog# 查看所有 git 命令$ git --help -a # 查看当前 HEAD 指向$ cat .git/HEAD# git 中 D 向下翻一行  F 向下翻页  B 向上翻页  Q 退出# 查看提交历史$ git log --oneline            --grep="关键字"          --graph           --all                --author "username"               --reverse           -num          -p          --before=  1  day/1  week/1  "2019-06-06"           --after= "2019-06-06"          --stat           --abbrev-commit           --pretty=format:"xxx"          # oneline -> 将日志记录一行一行的显示# grep="关键字" -> 查找日志记录中(commit提交时的注释)与关键字有关的记录# graph -> 记录图形化显示 ！！！    # all -> 将所有记录都详细的显示出来# author "username" -> 查找这个作者提交的记录# reverse -> commit 提交记录顺序翻转      # before -> 查找规定的时间(如:1天/1周)之前的记录   # num -> git log -10 显示最近10次提交 ！！！    # stat -> 显示每次更新的文件修改统计信息，会列出具体文件列表 ！！！# abbrev-commit -> 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符 ！！！# pretty=format:"xxx" ->  可以定制要显示的记录格式 ！！！# p -> 显示每次提交所引入的差异（按 补丁 的格式输出）！！！</code></pre><h3 id="git-reflog"><a class="markdownIt-Anchor" href="#git-reflog">#</a> Git reflog</h3><p>- 显示的是一个 HEAD 指向发生改变的时间列表。在你切换分支、用 git commit 进行提交、以及用 git reset 撤销 commit 时，HEAD 指向会改变，但当你进行 git checkout – <filename> 撤销或者 git stash  存储文件等操作时，HEAD 并不会改变，这些修改从来没有被提交过，因此 reflog 也无法帮助我们恢复它们。<br>-git reflog 不会永远保持，Git 会定期清理那些 “用不到的” 对象，不要指望几个月前的提交还一直在那里。</filename></p><h3 id="git-log-点线图"><a class="markdownIt-Anchor" href="#git-log-点线图">#</a> Git log 点线图</h3><p>-git 中一条分支就是一个指针，新建一条分支就是基于当前指针新建一个指针<br> - 切换至某个分支 ，就是将 HEAD 指向某条分支（指针）<br>- 切换至某个 commit ，就是将 HEAD 指向某个 commit</p><h2 id="git常用命令"><a class="markdownIt-Anchor" href="#git常用命令">#</a> Git 常用命令</h2><pre class=" language-language-git"><code class="language-language-git"># 查看工作区和暂存区的状态$ git status # 将工作区的文件提交到暂存区$ git add .  # 提交到本地仓库$ git commit -m "本次提交说明"# add和commit的合并，便捷写法（未追踪的文件无法直接提交到暂存区/本地仓库）$ git commit -am "本次提交说明"  # 将本地分支和远程分支进行关联$ git push -u origin branchName # 将本地仓库的文件推送到远程分支$ git push# 拉取远程分支的代码$ git pull origin branchName # 合并分支$ git merge branchName # 查看本地拥有哪些分支$ git branch# 查看所有分支（包括远程分支和本地分支）$ git branch -a # 切换分支$ git checkout branchName # 临时将工作区文件的修改保存至堆栈中$ git stash# 将之前保存至堆栈中的文件取出来$ git stash pop</code></pre><h2 id="git-常用命令详解"><a class="markdownIt-Anchor" href="#git-常用命令详解">#</a> Git 常用命令详解</h2><h3 id="add"><a class="markdownIt-Anchor" href="#add">#</a> add</h3><p>将工作区的文件添加到暂存区</p><pre class=" language-language-git"><code class="language-language-git"># 添加指定文件到暂存区（追踪新增的指定文件）$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区（追踪所有新增的文件）$ git add .# 删除工作区/暂存区的文件$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名工作区/暂存区的文件$ git mv [file-original] [file-renamed]# Git 2.0 以下版本#只作用于文件的新增和修改$ git add .  #只作用于文件的修改和删除$ gti add -u#作用于文件的增删改$ git add -A # Git 2.0 版本$ git add . 等价于 $ git add -A </code></pre><ul><li>git add . ：操作的对象是 “当前目录” 所有文件变更，"." 表示当前目录。会监控工作区的状态树，使用它会把工作区的所有变化提交到暂存区，包括文件内容修改（modified）以及新文件（new），但不包括被删除的文件。</li><li>git add -u ：操作的对象是整个工作区已经跟踪的文件变更，无论当前位于哪个目录下。仅监控已经被 add 的文件（即 tracked file），它会将被修改的文件（包括文件删除）提交到暂存区。git add -u 不会提交新文件（untracked file）。（git add --update 的缩写）</li><li>git add -A ：操作的对象是 “整个工作区” 所有文件的变更，无论当前位于哪个目录下。是上面两个功能的合集（git add --all 的缩写）。</li></ul><h3 id="status"><a class="markdownIt-Anchor" href="#status">#</a> Status</h3><pre class=" language-language-git"><code class="language-language-git"># 查看工作区和暂存区的状态$ git status </code></pre><p>##Commit</p><pre class=" language-language-git"><code class="language-language-git"># 将暂存区的文件提交到本地仓库并添加提交说明$ git commit -m "本次提交的说明"   # add 和 commit 的合并，便捷写法# 和 git add -u 命令一样，未跟踪的文件是无法提交上去的$ git commit -am "本次提交的说明"  # 跳过验证继续提交$ git commit --no-verify$ git commit -n# 编辑器会弹出上一次提交的信息，可以在这里修改提交信息$ git commit --amend# 修复提交，同时修改提交信息$ git commit --amend -m "本次提交的说明"# 加入 --no-edit 标记会修复提交但不修改提交信息，编辑器不会弹出上一次提交的信息$ git commit --amend --no-edit</code></pre><ul><li>git commit --amend 既可以修改上次提交的文件内容，也可以修改上次提交的说明。会用一个新的 commit 更新并替换最近一次提交的 commit 。如果暂存区有内容，这个新的 commit 会把任何修改内容和上一个 commit 的内容结合起来。如果暂存区没有内容，那么这个操作就只会把上次的 commit 消息重写一遍。永远不要修复一个已经推送到公共仓库中的提交，会拒绝推送到仓库</li></ul><h3 id="push-pull"><a class="markdownIt-Anchor" href="#push-pull">#</a> push &amp; pull</h3><p>分支推送顺序的写法是 &lt;来源地&gt;:&lt; 目的地 &gt;</p><pre class=" language-language-git"><code class="language-language-git"># 将本地仓库的文件推送到远程分支# 如果远程仓库没有这个分支，会新建一个同名的远程分支# 如果省略远程分支名，则表示两者同名$ git push <远程主机名> <本地分支名>:<远程分支名>$ git push origin branchname  # 如果省略本地分支名，则表示删除指定的远程分支# 因为这等同于推送一个空的本地分支到远程分支。$ git push origin :master# 等同于$ git push origin --delete master# 建立当前分支和远程分支的追踪关系$ git push -u origin master# 如果当前分支与远程分支之间存在追踪关系# 则可以省略分支和 -u $ git push# 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机$ git push --all origin# 拉取所有远程分支到本地镜像仓库中$ git pull# 拉取并合并项目其他人员的一个分支 $ git pull origin branchname  # 等同于 fetch + merge$ git fetch origin branchName$ git merge origin/branchName# 如果远程主机的版本比本地版本更新，推送时 Git 会报错，要求先在本地做 git pull 合并差异，# 然后再推送到远程主机。这时，如果你一定要推送，可以使用 –-force 选项 # （尽量避免使用）$ git push --force origin | git push -f origin</code></pre><h3 id="branch"><a class="markdownIt-Anchor" href="#branch">#</a> branch</h3><pre class=" language-language-git"><code class="language-language-git"># 查看本地分支$ git branch | git branch -l # 查看远程分支$ git branch -r # 查看所有分支（本地分支+远程分支）$ git branch -a # 查看所有分支并带上最新的提交信息$ git branch -av # 查看本地分支对应的远程分支$ git branch -vv # 新建分支# 在别的分支下新建一个分支，新分支会复制当前分支的内容# 注意：如果当前分支有修改，但是没有提交到仓库，此时修改的内容是不会被复制到新分支的$ git branch branchname # 切换分支(切换分支时，本地工作区，仓库都会相应切换到对应分支的内容)$ git checkout branchname # 创建一个 aaa 分支，并切换到该分支 （新建分支和切换分支的简写）$ git checkout -b aaa # 可以看做是基于 master 分支创建一个 aaa 分支，并切换到该分支$ git checkout -b aaa master# 新建一条空分支（详情请看问题列表）$ git checkout --orphan emptyBranchName$ git rm -rf . # 删除本地分支,会阻止删除包含未合并更改的分支$ git brnach -d branchname # 强制删除一个本地分支，即使包含未合并更改的分支$ git branch -D branchname  # 删除远程分支# 推送一个空分支到远程分支，其实就相当于删除远程分支$ git push origin  :远程分支名# 或者$ git push origin --delete 远程分支名 # 修改当前分支名$ git branch -m branchname </code></pre><h3 id="merge三种常用合并方法"><a class="markdownIt-Anchor" href="#merge三种常用合并方法">#</a> merge 三种常用合并方法</h3><pre class=" language-language-git"><code class="language-language-git"># 默认 fast-forward ，HEAD 指针直接指向被合并的分支$ git merge # 禁止快进式合并$ git merge --no-ff $ git merge --squash </code></pre><p><img data-src="https://user-gold-cdn.xitu.io/2020/6/15/172b390eac6f9586?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p><ul><li>fast-forward：会在当前分支的提交历史中添加进被合并分支的提交历史（得先理解什么时候会发生快速合并，并不是每次 merge 都会发生快速合并）；</li><li>–no-ff：会生成一个新的提交，让当前分支的提交历史不会那么乱；</li><li>–squash：不会生成新的提交，会将被合并分支多次提交的内容直接存到工作区和暂存区，由开发者手动去提交，这样当前分支最终只会多出一条提交记录，不会掺杂被合并分支的提交历史</li></ul><h3 id="rebase"><a class="markdownIt-Anchor" href="#rebase">#</a> rebase</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvODk2MDQzNDg4MDI5NjAwLzEyMTYyODk1Mjc4MjM2NDg=">https://www.liaoxuefeng.com/wiki/896043488029600/1216289527823648</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC0lRTUlODglODYlRTYlOTQlQUYtJUU1JThGJTk4JUU1JTlGJUJB">https://git-scm.com/book/zh/v2/Git - 分支 - 变基</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80YThmNGFmNGU4MDM=">https://www.jianshu.com/p/4a8f4af4e803</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTU0Mzg2YWYyNjVkYTNlM2I3YTYzMTcjaGVhZGluZy05">https://juejin.im/post/5a54386af265da3e3b7a6317#heading-9</span></p><h3 id="stach"><a class="markdownIt-Anchor" href="#stach">#</a> stach</h3><ul><li>能够将所有未提交的修改保存至堆栈中，用于后续恢复当前工作区内容</li><li>如果文件没有提交到暂存区（使用 git add . 追踪新的文件），使用该命令会提示 No local changes to save ，无法将修改保存到堆栈中<br>使用场景： 当你接到一个修复紧急 bug 的任务时候，一般都是先创建一个新的 bug 分支来修复它，然后合并，最后删除。但是，如果当前你正在开发功能中，短时间还无法完成，无法直接提交到仓库，这时候可以先把当前工作区的内容 git stash 一下，然后去修复 bug，修复后，再 git stash pop，恢复之前的工作内容。</li></ul><pre class=" language-language-git"><code class="language-language-git"># 将所有未提交的修改（提交到暂存区）保存至堆栈中$ git stash # 给本次存储加个备注，以防时间久了忘了$ git stash save "存储"# 存储未追踪的文件$ git stash -u# 查看存储记录$ git stash list在 Windows 上和 PowerShell 中，需要加双引号# 恢复后，stash 记录并不删除$ git stash apply "stash@{index}"# 恢复的同时把 stash 记录也删了$ git stash pop "stash@{index}"# 删除 stash 记录$ git stash drop "stash@{index}"# 删除所有存储的进度$ git stash clear# 查看当前记录中修改了哪些文件$ git stash show "stash@{index}"# 查看当前记录中修改了哪些文件的内容$ git stash show -p "stash@{index}" </code></pre><h3 id="diff"><a class="markdownIt-Anchor" href="#diff">#</a> diff</h3><pre class=" language-language-git"><code class="language-language-git"># 查看工作区和暂存区单个文件的对比$ git diff filename # 查看工作区和暂存区所有文件的对比$ git diff # 查看工作区和暂存区所有文件的对比，并显示出所有有差异的文件列表$ git diff --stat   # 注意：# 1.你修改了某个文件，但是没有提交到暂存区，这时候会有对比的内容# 一旦提交到暂存区，就不会有对比的内容(因为暂存区已经更新)# 2.如果你新建了一个文件，但是没有提交到暂存区，这时候 diff 是没有结果的# 查看暂存区与上次提交到本地仓库的快照（即最新提交到本地仓库的快照）的对比$ git diff --cached/--staged# 查看工作区与上次提交到本地仓库的快照（即最新提交到本地仓库的快照）的对比$ git diff branchname# 查看工作区与 HEAD 指向（默认当前分支最新的提交）的对比$ git diff HEAD   # 查看两个本地分支中某一个文件的对比$ git diff branchname..branchname filename # 查看两个本地分支所有的对比$ git diff branchname..branchname # 查看远程分支和本地分支的对比$ git diff origin/branchname..branchname # 查看远程分支和远程分支的对比$ git diff origin/branchname..origin/branchname # 查看两个 commit 的对比$ git diff commit1..commit2  </code></pre><h3 id="remote"><a class="markdownIt-Anchor" href="#remote">#</a> remote</h3><pre class=" language-language-git"><code class="language-language-git"># 查看所有远程主机$ git remote# 查看关联的远程仓库的详细信息$ git remote -v # 删除远程仓库的 “关联”$ git remote rm projectname # 设置远程仓库的 “关联”$ git remote set-url origin <newurl></code></pre><h3 id="tag"><a class="markdownIt-Anchor" href="#tag">#</a> tag</h3><p>常用于发布版本</p><pre class=" language-language-git"><code class="language-language-git"># 默认在 HEAD 上创建一个标签 $ git tag v1.0# 指定一个 commit id 创建一个标签 $ git tag v0.9 f52c633# 创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字$ git tag -a v0.1 -m "version 0.1 released" # 查看所有标签# 注意：标签不是按时间顺序列出，而是按字母排序的。$ git tag# 查看单个标签具体信息$ git show <tagname># 推送一个本地标签$ git push origin <tagname># 推送全部未推送过的本地标签$ git push origin --tags# 删除本地标签# 因为创建的标签都只存储在本地，不会自动推送到远程。# 所以，打错的标签可以在本地安全删除。$ git tag -d v0.1# 删除一个远程标签（先删除本地 tag ，然后再删除远程 tag）$ git push origin :refs/tags/<tagname></code></pre><h3 id="删除文件"><a class="markdownIt-Anchor" href="#删除文件">#</a> 删除文件</h3><pre class=" language-language-git"><code class="language-language-git"># 删除暂存区和工作区的文件$ git rm filename  # 只删除暂存区的文件，不会删除工作区的文件$ git rm --cached filename </code></pre><p>如果在配置 .gitignore 文件之前就把某个文件上传到远程仓库了，这时候想把远程仓库中的该文件删除，此时你配置 .gitignore 文件也没有用，因为该文件已经被追踪了，但又不想在本地删除该文件后再重新提交到远程仓库，这时候可以使用 git rm --cached filename 命令取消该文件的追踪，这样下次提交的时候，git 就不会再提交这个文件，从而远程仓库的该文件也会被删除</p><p>版本切换 &amp; 重设 &amp; 撤销</p><ul><li>checkout 可以撤销工作区的文件，reset 可以撤销工作区 / 暂存区的文件</li><li>reset 和 checkout 可以作用于 commit 或者文件，revert 只能作用于 commit</li></ul><h3 id="checkout-详解"><a class="markdownIt-Anchor" href="#checkout-详解">#</a> checkout 详解</h3><pre class=" language-language-git"><code class="language-language-git"># 恢复暂存区的指定文件到工作区$ git checkout <filename># 恢复暂存区的所有文件到工作区$ git checkout .# 回滚到最近的一次提交# 如果修改某些文件后，没有提交到暂存区，此时的回滚是回滚到上一次提交# 如果是已经将修改的文件提交到仓库了，这时再用这个命令回滚无效# 因为回滚到的是之前自己修改后提交的版本$ git checkout HEAD $ git checkout HEAD -- filename# 回滚到最近一次提交的上一个版本$ git checkout HEAD^ # 回滚到最近一次提交的上2个版本$ git checkout HEAD^^ # 切换分支，在这里也可以看做是回到项目「当前」状态的方式$ git checkout <当前你正在使用的分支># 切换到某个指定的 commit 版本$ git checkout <commit_id># 切换指定 tag $ git checkout <tag></code></pre><ul><li>在开发的正常阶段，HEAD 一般指向 master 或是其他的本地分支，但当你使用 git checkout <commit id=""> 切换到指定的某一次提交的时候，HEAD 就不再指向一个分支了 —— 它直接指向一个提交，HEAD 就会处于 detached 状态（游离状态）。</commit></li><li>切换到某一次提交后，你可以查看文件，编译项目，运行测试，甚至编辑文件而不需要考虑是否会影响项目的当前状态，你所做的一切都不会被保存到主栈的仓库中。当你想要回到主线继续开发时，使用 git checkout branchName 回到项目初始的状态（这时候会提示你是否需要新建一条分支用于保留刚才的修改）。</li><li>哪怕你切换到了某一版本的提交，并且对它做了修改后，不小心提交到了暂存区，只要你切换回分支的时候，依然会回到项目的初始状态。（注意：你所做的修改，如果 commit 了，会被保存到那个版本中。切换完分支后，会提示你是否要新建一个分支来保存刚才修改的内容。如果你刚才解决了一个 bug ，这时候可以新建一个临时分支，然后你本地自己的开发主分支去合并它，合并完后删除临时分支）。</li><li>一般我都是用 checkout 回退版本，查看历史代码，测试 bug 在哪</li></ul><h3 id="reset-详解"><a class="markdownIt-Anchor" href="#reset-详解">#</a> reset 详解</h3><p>git reset [–hard|soft|mixed|merge|keep] [<commit>或 HEAD]：将当前的分支重设 (reset) 到指定的 <commit> 或者 HEAD (默认，如果不显示指定 <commit>，默认是 HEAD ，即最新的一次提交)，并且根据 [mode] 有可能更新索引和工作目录。mode 的取值可以是 hard、soft、mixed、merged、keep 。</commit></commit></commit></p><pre class=" language-language-git"><code class="language-language-git"># 从暂存区撤销特定文件，但不改变工作区。它会取消这个文件的暂存，而不覆盖任何更改$ git reset <fileName># 重置暂存区最近的一次提交，但工作区的文件不变$ git reset # 等价于 $ git reset HEAD （默认）# 重置暂存区与工作区，回退到最近一次提交的版本内容$ git reset --hard # 重置暂存区与工作区，回退到最近一次提交的上一个版本$ git reset --hard HEAD^ # 将当前分支的指针指向为指定 commit（该提交之后的提交都会被移除），同时重置暂存区，但工作区不变$ git reset <commit># 等价于 $ git reset --mixed  <commit># 将当前分支的指针指向为指定 commit（该提交之后的提交都会被移除），但保持暂存区和工作区不变$ git reset --soft  <commit># 将当前分支的指针指向为指定 commit（该提交之后的提交都会被移除），同时重置暂存区、工作区$ git reset --hard  <commit></code></pre><ul><li>git reset 有很多种用法。它可以被用来移除提交快照，尽管它通常被用来撤销暂存区和工作区的修改。不管是哪种情况，它应该只被用于本地修改 —— 你永远不应该重设和其他开发者共享的快照。</li><li>当你用 reset 回滚到了某个版本后，那么在下一次 git 提交时，之前该版本后面的版本会被作为垃圾删掉。</li><li>当我们回退到一个旧版本后，此时再用 git log 查看提交记录，会发现之前的新版本记录没有了。如果第二天，你又想恢复到新版本怎么办？找不到新版本的 commit_id 怎么办？</li></ul><p>我们可以用 git reflog 查看历史命令，这样就可以看到之前新版本的 commit_id ，然后 git reset --hard commit_id 就可以回到之前的新版本代码</p><ul><li>虽然可以用 git reflog 查看本地历史，然后回复到之前的新版本代码，但是在别的电脑上是无法获取你的历史命令的，所以这种方法不安全。万一你的电脑突然坏了，这时候就无法回到未来的版本。</li></ul><p>未完待白嫖转载。。。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Install and Configure Laravel with LEMP on Ubuntu 18.04</title>
      <link href="/2020/06/01/laraveldeploy/"/>
      <url>/2020/06/01/laraveldeploy/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-deploy-laravel-environment-lnmplinux-nginx-mysql-php-laravel"><a class="markdownIt-Anchor" href="#2020-deploy-laravel-environment-lnmplinux-nginx-mysql-php-laravel">#</a> 2020 Deploy Laravel Environment (LNMP=Linux、Nginx、MySQL、PHP、Laravel)</h1><p>Prepare:</p><ul><li>server(I use aws servcice)</li><li>server system is linux (I use Ubuntu 18.04)</li><li>Command tool(I use iTerm for mac)</li></ul><h3 id="step-1-deploy-linux-server-to-aws"><a class="markdownIt-Anchor" href="#step-1-deploy-linux-server-to-aws">#</a> Step 1  Deploy Linux server to AWS</h3><h3 id="step-2-connect-server-by-ssh"><a class="markdownIt-Anchor" href="#step-2-connect-server-by-ssh">#</a> Step 2 Connect Server by ssh</h3><h3 id="step-3-connect-as-a-root"><a class="markdownIt-Anchor" href="#step-3-connect-as-a-root">#</a> Step 3 connect as a root</h3><pre><code cmd="true" class="language-bash">$ sudo passwd root[sudo] password for ramesh:Enter new UNIX password:Retype new UNIX password:passwd: password updated successfully</code></pre><p>Or</p><pre><code cmd="true" class="language-bash">su -root or sudo -i</code></pre><h3 id="step-4-install-nginx"><a class="markdownIt-Anchor" href="#step-4-install-nginx">#</a> Step 4 Install Nginx</h3><pre><code cmd="true" class="language-bash">apt-get update//Update apt is because for install php nginx and mysqlapt-get install nginxnginx -v//check install succeful or not</code></pre><pre><code cmd="true" class="language-bash"></code></pre><h3 id="step-5-install-mysql"><a class="markdownIt-Anchor" href="#step-5-install-mysql">#</a> Step 5 Install MySQL</h3><pre><code cmd="true" class="language-bash">apt-get install mysql-server// type Y if askingmysql -v// check is that install successful// you will go to mysql command like below//mysql&gt;// just type quit command</code></pre><h3 id="step-6-install-php-and-module"><a class="markdownIt-Anchor" href="#step-6-install-php-and-module">#</a> Step 6 Install PHP and Module</h3><pre><code cmd="true" class="language-bash">//1)apt install php7.2-cli// Tyepe Y if asking // Check install seccessful php -v// 2）// Install php-fpmapt-get install php-fpm// Tyepe Y if asking // 3）// Check Modulephp -m</code></pre><p>This is  my output</p><pre><code cmd="true" class="language-bash">[PHP Modules]  calendar       Core           ctype          date           exif           fileinfo       filter         ftp            gettext        hash           iconv          json           libxml         openssl        pcntl          pcre           PDO            Phar           posix          readline       Reflection     session        shmop          sockets        sodium         SPL            standard       sysvmsg        sysvsem        sysvshm        tokenizer      Zend OPcache   zlib           [Zend Modules] Zend OPcache</code></pre><pre><code cmd="true" class="language-bash">4）// Module requirement for laravel ,please check you have thesePHP &gt;= 7.1.3PHP OpenSSL PHP PDO PHP Mbstring PHP Tokenizer PHP XML PHP Ctype PHP JSON // Install it if you dont have apt-get install php-mysql php-xml php-mbstring php-ctype php-zip php-curl// Type Y if asking </code></pre><h3 id="step-8-install-conmposer"><a class="markdownIt-Anchor" href="#step-8-install-conmposer">#</a> Step 8 Install Conmposer</h3><p>// 1）<br>// 进入 ubuntu 的 home 路径<br> cd ~</p><p>// 2）<br>// 下载安装脚本 － composer-setup.php － 到当前目录<br> php -r “copy (‘<span class="exturl" data-url="aHR0cHM6Ly9pbnN0YWxsLnBocGNvbXBvc2VyLmNvbS9pbnN0YWxsZXI=">https://install.phpcomposer.com/installer</span>’, ‘composer-setup.php’);”</p><p>// 3）<br>// 执行安装过程<br> php composer-setup.php</p><p>// 4）<br>// 删除安装脚本<br> php -r “unlink (‘composer-setup.php’);”</p><p>// 5）<br>// 全局将 Composer 配置到系统中，全局安装是将 Composer 安装到系统环境变量 PATH 所包含的路径下面，然后就能够在命令行窗口的任何路径下直接执行 composer 命令了<br> sudo mv composer.phar/usr/local/bin/composer</p><p>// 6）<br>// 修改权限<br> chmod u+x /usr/local/bin/composer</p><p>// 7）<br>// 验证 Composer 是否安装成功<br> composer -v<br>// 输出版本号之类的即安装成功</p><p>// 8）<br>// 全局修改 Composer 镜像地址（为什么要修改，因为 Composer 在国外，众所周知访问慢所以修改）<br>// 注意：下方有两个配置的地址，选一个即可，<br>// 现在你所看的 composer 安装教程是 <span class="exturl" data-url="aHR0cHM6Ly9wa2cucGhwY29tcG9zZXIuY29t">https://pkg.phpcomposer.com</span> 的官方推荐，但是我用该网站<br> // 只有在装我 Windows 本地测试的时候可以但在 aliyun 主机上 不太行，有些东西下载不到，所以我用的是下方的链接一<br>一、composer config -g repo.packagist composer <span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmFsaXl1bi5jb20vY29tcG9zZXIv">https://mirrors.aliyun.com/composer/</span><br> 二、composer config -g repo.packagist composer <span class="exturl" data-url="aHR0cHM6Ly9wYWNrYWdpc3QucGhwY29tcG9zZXIuY29t">https://packagist.phpcomposer.com</span><br>// 修改后会有一行橙色的警告<br> Do not run Composer as root/super user! See <span class="exturl" data-url="aHR0cHM6Ly9nZXRjb21wb3Nlci5vcmcvcm9vdA==">https://getcomposer.org/root</span> for details<br>// 提示不要在 root 权限下修改 Composer，官方这样做是为了避免一些第三方代码拥有超级管理员的权限来执行一些脚本之类的<br> // 警告只是提示一下，不会影响你配置的代码</p><p>// 9）<br>// 验证上个步骤是否配置成功<br> composer config -lg<br>// 在接下来的输出中会有一行<br> [repositories.packagist.org.url] <span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmFsaXl1bi5jb20vY29tcG9zZXIv">https://mirrors.aliyun.com/composer/</span><br>// 这样的，如果你的地址是上一步中配置的地址，那么就配置对了</p><p>apt-get install npm<br>// 接下来的提示是否确定时输入：Y<br>// 安装该工具也会顺便安装 Node.js，默认的 NPM 版本比较低，我们可以通过这个命令对其进行升级<br> npm install -g npm<br>// 升级后需要输入命令 reboot 重启主机或需要退出或打开新的窗口登录服务器<br> // 再 npm -v 才会看到现在安装的最新版本</p><p>apt-get install git<br>// 接下来的提示是否确定时输入：Y</p><p>// 为主机生成 ssh key（将双引号里的换成你的账号就行）<br>ssh-keygen -t rsa -C “<span class="exturl" data-url="bWFpbHRvOnRjaGVld2luZzFAZ21haWwuY29t">tcheewing1@gmail.com</span>”<br>// 上面的命令输入后连续按回车即可，好像是三次</p><p>I get this<br>The key’s randomart image is:<br>±–[RSA 2048]----+<br>|          …o+.  |<br>|           …=.  |<br>|           .E.=  |<br>|    o…   … . |<br>|   .o+o.S*       |<br>|    oB.+O +      |<br>|    o=Bo.+ o     |<br>|   oooBo= .      |<br>|  o++=o= o       |<br>±—[SHA256]-----+<br>root@ip-172-31-29-228:~#</p><p>1）Create Laravel<br>// 我们将 Laravel 项目创建到 Linux 主机的 /var/www 目录下<br> // 首先进入目录<br> cd /var/www/<br>//ls 可以看当前目录下的文件，会看到有一个 html 的文件夹</p><p>2）<br>创建 Laravel 项目（2 种方式）<br>// 第一种：直接通过 Composer 安装<br> composer create-project laravel/laravel Laravel60 --prefer-dist “6.*”<br>// 第二种（推荐）：虽然我们已经在安装 Composer 的过程中配置了比较快的镜像地址，但有些时候可能还是会比较慢<br> // 在这里我为大家创建了一个完全新的 Laravel 项目，其 Laravel 版本是  6.18.2<br>// 由于我们前面已通过 Git 在 GitHub 中 clone 准备好的纯净 Laravel 项目<br> git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NxNTcxMzMvTGFyYXZlbDYwLmdpdA==">https://github.com/sq57133/Laravel60.git</span><br>// 该项目的 GitHub 网页地址 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NxNTcxMzMvTGFyYXZlbDYw">https://github.com/sq57133/Laravel60</span></p><p>3）<br>上条步骤安装成功后，此时你就可以开始开发你的项目了</p><p>初始化 配置项目<br> 1）<br>// 进入你的项目<br> cd /var/www/Laravel60</p><p>2）<br>// 执行安装（该安装是指安装你 Laravel 项目根目录下 composer.json 里引用的东西，如果你安装过程中输出的内容<br> // 中会有挺多 failed 或者你安装完后运行也不好用，那么你应该去本教程步骤 8 的第 8 个小步骤中直接选新的地址后重新 composer install 试试<br> // 即可，里面我也写了我用的是哪个）<br>composer install</p><p>3）<br>// 初始化前端依赖、前端资源<br> npm install<br>npm run prod<br>// 如果在运行 npm run prod 的过程中报错，可以尝试通过在 package.json 中指定 cross-env 的路径来解决：<br>“scripts”: {<br>…<br>“prod”: “npm run production”,<br>“production”: “node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js”<br>},</p><p>修改项目权限，创建软连<br> cd /var/www<br>chown -R www-data:www-data Laravel60/<br>// Laravel60 是你的 Laravel 你的项目文件夹名<br> // 如此一来就一劳永逸解决了 Laravel 项目权限问题</p><p>// 在 Laravel 项目的 public 目录下创建一个指向 storage/app/public 目录的软链 storage：<br>cd /var/www/Laravel60<br>php artisan storage:link</p><p>Restart nginx mysql php<br>// 刚安装完的项目不重启初始化一下可能会出错，重启它们<br> service nginx restart<br>service mysql restart<br>service php7.2-fpm restart // 这里要注意如果你不是跟着教程安装的 7.2 就要改成你的</p><p>Create Database<br>1）<br>// 登录数据库<br> mysql -u root -p<br>// 默认密码为空，若提示输入密码直接回车即可</p><p>2）<br>// 为数据库创建密码<br> ALTER USER ‘root’@‘localhost’ IDENTIFIED WITH mysql_native_password BY ‘your-password’;<br>//ALTER USER ‘root’@‘localhost’ IDENTIFIED WITH mysql_native_password BY ‘customer2020’;<br>// 将 your-password 替换为你的密码，不要去掉单引号</p><p>3）<br>// 在数据库中创建一个数据库<br> create database laravel60 default charset utf8 collate utf8_general_ci;<br>// 至此，我们就创建了一个名为 laravel60 的数据库了</p><p>4）<br>// 退出 MySQL 命令行<br> quit</p><p>1）更新 Laravel.env 配置<br> // 若你还不了解 Laravel 的相关操作，那么到现在其实已经相当于创建了 Laravel 项目但是还没配置<br> // 接下来我们会将 Laravel 项目配置到可以通过域名访问，那么如果你只是想跟着教程到最后能够完成配置可以继续看下去<br> // 但是毕竟你是要开发 Laravel 项目的，如果你不会就算配置完了能运行实际上也是没有太大意义的<br> // 推荐一个学习的网站<br> // <span class="exturl" data-url="aHR0cHM6Ly94dWV5dWFuanVuLmNvbS9ib29rcy9sYXJhdmVsLXR1dG9yaWFsLTY=">https://xueyuanjun.com/books/laravel-tutorial-6</span></p><p>2）<br>// 复制 .env.example 文件新文件文件名为 .env<br>cd /var/www/Laravel60<br>cp .env.example .env</p><p>3）<br>// 准备编辑 .env<br>// Laravel60 根目录下<br> vim .env</p><p>4）<br>// 编辑并配置 .env（如何用 vim 编辑在本章大步骤 2 中的易错点 2 中可以看到 vim 的基本编辑使用方式）<br>APP_NAME=Laravel60<br>APP_URL=http:// 你的域名<br> DB_DATABASE=Laravel60<br>DB_USERNAME=root<br>DB_PASSWORD=xxxxxx<br>// APP_NAME 改为你的项目名<br> // APP_URL 你的域名，不写也可以<br> // DB_DATABASE 为你第 15 步中创建的数据库名称<br> // DB_USERNAME 数据库用户名<br> // DB_PASSWORD 为你第 15 步中创建的密码</p><p>5）<br>// 生成 Application key 想看直接到 key 值的后面加上 "--show" 不包括双引号<br> php artisan key:generate</p><p>base64:MoaI4UOF6+CEcH3tcsxZfokncv4iePblakrtUXQJZ1c=</p><p>php artisan migrate<br>// 没有报错即成功</p><p>// 运行填充命令初始化测试数据（若你不懂或者没有写测试数据可以不运行）<br>php artisan db:seed</p><p>Deploy nginx on laravel<br>1）<br>// 进入 nginx 配置目录<br> cd /etc/nginx/sites-available/<br>//ls 命令可以看到当前目录下有一个文件 default</p><p>2）<br>// 备份 default 文件方便配置错了可以恢复<br> cp default defaultBackup</p><p>3）<br>//vim default 文件，这里我直接把我的 default 配置粘贴出来告诉你们改了哪里</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/05/31/mindmap/"/>
      <url>/2020/05/31/mindmap/</url>
      
        <content type="html"><![CDATA[<svg id="mindmap"></svg><script src="https://cdn.jsdelivr.net/npm/d3@5"></script><script src="https://cdn.jsdelivr.net/npm/markmap-lib@0.7.10/dist/browser/view.min.js"></script><script>((data, init, items, opts) => {        const {          Markmap,          loadPlugins        } = window.markmap;        (init ? init(loadPlugins, items, opts) : Promise.resolve()).then(() => {          Markmap.create('svg#mindmap', null, data);        });      })({"t":"root","d":0,"v":"","c":[{"t":"paragraph","d":1,"v":"title: Mindmap for Markdown<br/>top: false<br/>cover: false<br/>toc: true<br/>mathjax: true<br/>date: 2020-05-31 23:18:20<br/>password:<br/>summary:<br/>tags:<br/>categories:"},{"t":"heading","d":1,"v":"markmap-lib","c":[{"t":"heading","d":2,"v":"Links","c":[{"t":"list_item","d":3,"v":"<a href=\"https://markmap.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://markmap.js.org/</a>"},{"t":"list_item","d":3,"v":"<a href=\"https://github.com/gera2ld/markmap-lib\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>"}]},{"t":"heading","d":2,"v":"Related","c":[{"t":"list_item","d":3,"v":"<a href=\"https://github.com/gera2ld/coc-markmap\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">coc-markmap</a>"},{"t":"list_item","d":3,"v":"<a href=\"https://github.com/gera2ld/gatsby-remark-markmap\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">gatsby-remark-markmap</a>"}]},{"t":"heading","d":2,"v":"Features","c":[{"t":"list_item","d":3,"v":"links"},{"t":"list_item","d":3,"v":"<strong>inline</strong> <del>text</del> <em>styles</em>"},{"t":"list_item","d":3,"v":"multiline<br/>text"},{"t":"list_item","d":3,"v":"<code>inline code</code>"},{"t":"list_item","d":3,"v":"<pre><code class=\"language-js\">console.log('code block');\n</code></pre>"},{"t":"list_item","d":3,"v":"MathJax - <code>\\(x = &#123;-b \\pm \\sqrt&#123;b^2-4ac&#125; \\over 2a&#125;\\)</code>"}]}]}]})</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mindmap for Markdown</title>
      <link href="/2020/05/31/mindmap/"/>
      <url>/2020/05/31/mindmap/</url>
      
        <content type="html"><![CDATA[<h1 id="markmap-lib"><a class="markdownIt-Anchor" href="#markmap-lib">#</a> markmap-lib</h1><h2 id="links"><a class="markdownIt-Anchor" href="#links">#</a> Links</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tYXJrbWFwLmpzLm9yZy8=">https://markmap.js.org/</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlcmEybGQvbWFya21hcC1saWI=">GitHub</span></li></ul><h2 id="related"><a class="markdownIt-Anchor" href="#related">#</a> Related</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlcmEybGQvY29jLW1hcmttYXA=">coc-markmap</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlcmEybGQvZ2F0c2J5LXJlbWFyay1tYXJrbWFw">gatsby-remark-markmap</span></li></ul><h2 id="features"><a class="markdownIt-Anchor" href="#features">#</a> Features</h2><ul><li>links</li><li><strong>inline</strong> <s>text</s> <em>styles</em></li><li>multiline<br>text</li><li><code>inline code</code></li><li><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'code block'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></tbody></table></figure></li><li>MathJax -  <code>\(x = {-b \pm \sqrt{b^2-4ac} \over 2a}\)</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Mindmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Markdown 语法参考</title>
      <link href="/2020/05/31/testing/"/>
      <url>/2020/05/31/testing/</url>
      
        <content type="html"><![CDATA[<p>命令行中输入：</p><p>hexo new “new article” =&gt;Create post<br>hexo new draft “new draft” =&gt;Create draft</p><p>#title 1<br>##title 2<br>###title 3<br><strong>bold</strong><br><sub>line</sub></p><p><em>这会是 斜体 的文字</em><br><em>这会是 斜体 的文字</em></p><p><strong>这会是 粗体 的文字</strong><br><strong>这会是 粗体 的文字</strong></p><p><em>你也 <strong>组合</strong> 这些符号</em></p><p><s>这个文字将会被横线删除</s></p><ul><li><p>Item 1</p></li><li><p>Item 2</p><ul><li>Item 2a</li><li>Item 2b</li></ul><p>有序列表</p></li></ul><ol><li>Item 1</li><li>Item 2</li><li>Item 3<ol><li>Item 3a</li><li>Item 3b</li></ol></li></ol><p>添加图片<br><img data-src="/images/logo.png" alt="GitHub Logo"><br>Format: <img data-src="url" alt="Alt Text"><br> 链接<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29t"> https://github.com</span> - 自动生成！<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29t">GitHub</span><br> 引用<br>正如 Kanye West 所说：</p><blockquote><p>We’re living the future so<br>the present is our past.<br> 分割线<br>如下，三个或者更多的</p></blockquote><hr><p>连字符</p><hr><p>星号</p><hr><p>下划线<br>行内代码<br>我觉得你应该在这里使用<br> <code>&lt;addr&gt;</code>  才对。<br>代码块<br>你可以在你的代码上面和下面添加 ``` 来表示代码块。</p><p>语法高亮<br>你可以给你的代码块添加任何一种语言的语法高亮</p><p>例如，给 ruby 代码添加语法高亮：</p><pre class=" language-language-ruby"><code class="language-language-ruby">require 'redcarpet'markdown = Redcarpet.new("Hello World!")puts markdown.to_html</code></pre><p>会得到下面的效果：</p><p>代码块 class（MPE 扩展的特性）<br>你可以给你的代码块设置 class。</p><p>例如，添加 class1 class2 到一个 代码块：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> x <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>代码行数<br>如果你想要你的代码块显示代码行数，只要添加 line-numbers class 就可以了。</p><p>例如：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> x <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>高亮代码行数<br>你可以通过添加 highlight 属性的方式来高亮代码行数：</p><pre><code highlight="10" class="language-javascript"></code></pre><pre><code highlight="10-20" class="language-javascript"></code></pre><pre><code highlight="[1-10,15,20-22]" class="language-javascript"></code></pre><p>任务列表</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_0" checked="true" disabled="true"><label for="cbx_0"> @mentions, #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> list syntax required (any unordered or ordered list supported)</label></li><li class="task-list-item"><input type="checkbox" id="cbx_2" checked="true" disabled="true"><label for="cbx_2"> this is a complete item</label></li><li class="task-list-item"><input type="checkbox" id="cbx_3" disabled="true"><label for="cbx_3"> this is an incomplete item</label></li></ul><p>表格</p><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content from cell 1</td><td>Content from cell 2</td></tr><tr><td>Content in the first column</td><td>Content in the second column</td></tr></tbody></table><p>符号<br>😄<br>:fa-car:</p><p>上下标<br> 30<sup>th</sup><br>H<sub>2</sub>O</p><p>脚注<br> Content <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><p>缩略</p><p>_[HTML]: Hyper Text Markup Language<br>_[W3C]: World Wide Web Consortium<br>The HTML specification<br>is maintained by the W3C.</p><p>标记<br><mark> marked</mark></p><p>chart reference<br><span class="exturl" data-url="aHR0cHM6Ly9zaGQxMDF3eXkuZ2l0aHViLmlvL21hcmtkb3duLXByZXZpZXctZW5oYW5jZWQvIy96aC1jbi9kaWFncmFtcw==">https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/diagrams</span></p><p>import file<br><span class="exturl" data-url="aHR0cHM6Ly9zaGQxMDF3eXkuZ2l0aHViLmlvL21hcmtkb3duLXByZXZpZXctZW5oYW5jZWQvIy96aC1jbi9maWxlLWltcG9ydHM=">https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/file-imports</span></p><pre><code cmd="true" class="language-bash">ls .</code></pre><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>code chunck <span class="exturl" data-url="aHR0cHM6Ly9zaGQxMDF3eXkuZ2l0aHViLmlvL21hcmtkb3duLXByZXZpZXctZW5oYW5jZWQvIy96aC1jbi9jb2RlLWNodW5r">https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/code-chunk</span></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Hi! This is a footnote <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>article title</title>
      <link href="/2020/05/29/article-title/"/>
      <url>/2020/05/29/article-title/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/29/hello-world/"/>
      <url>/2020/05/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3><pre class=" language-language-bash"><code class="language-language-bash">$ hexo new "My New Post"</code></pre><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3><pre class=" language-language-bash"><code class="language-language-bash">$ hexo server</code></pre><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3><pre class=" language-language-bash"><code class="language-language-bash">$ hexo generate</code></pre><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><pre class=" language-language-bash"><code class="language-language-bash">$ hexo deploy</code></pre><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
